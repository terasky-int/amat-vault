global:
  enabled: true
  openshift: true
  tlsDisable: false
  resources:
    requests:
        memory: 256Mi
        cpu: 250m
    limits:
        memory: 256Mi
        cpu: 250m

injector:
  enabled: true
  replicas: 1

  # image sets the repo and tag of the vault-k8s image to use for the injector.
  image:
    repository: "registry.connect.redhat.com/hashicorp/vault-k8s"
    tag: "1.5.0-ubi"

  # agentImage sets the repo and tag of the Vault image to use for the Vault Agent
  # containers.  This should be set to the official Vault image.  Vault 1.3.1+ is
  # required.
  agentImage:
    repository: "registry.connect.redhat.com/hashicorp/vault-enterprise"
    tag: "1.16.14-ent-ubi"


server:
  enabled: true
  
  # [Enterprise Only] This value refers to a Kubernetes secret that you have
  # created that contains your enterprise license. If you are not using an
  # enterprise image or if you plan to introduce the license key via another
  # route, then leave secretName blank ("") or set it to null.
  # Requires Vault Enterprise 1.8 or later.
  enterpriseLicense:
    # The name of the Kubernetes secret that holds the enterprise license. The
    # secret must be in the same namespace that Vault is installed into.
    secretName: "vault-enterprise-license"
    # secretKey: "license"

  image:
    repository: "registry.connect.redhat.com/hashicorp/vault-enterprise"
    tag: "1.16.14-ent-ubi"

  updateStrategyType: "OnDelete"

  resources:
    requests:
      memory: 8Gi
      cpu: 2000m
    limits:
      memory: 16Gi
      cpu: 2000m

  # OpenShift only - create a route to expose the service
  # By default the created route will be of type passthrough
  route:
    enabled: true

    # When HA mode is enabled and K8s service registration is being used,
    # configure the route to point to the Vault active service.
    activeService: true

    labels: {}
    annotations: {}
    host: vault.apps.demo.terasky.demo  # CHANGE ME
    # tls will be passed directly to the route's TLS config, which
    # can be used to configure other termination methods that terminate
    # TLS at the router
    tls:
      termination: passthrough

  authDelegator:
    enabled: true

  # Configure the logging verbosity for the Vault server.
  # Supported log levels include: trace, debug, info, warn, error
  logLevel: "info"

  # For HA configuration and because we need to manually init the vault,
  # we need to define custom readiness/liveness Probe settings
  readinessProbe:
    enabled: true
    path: "/v1/sys/health?standbyok=true&perfstandbyok=true"
    initialDelaySeconds: 10
    periodSeconds: 5
  livenessProbe:
    enabled: true
    path: "/v1/sys/health?standbyok=true&perfstandbyok=true"
    initialDelaySeconds: 60
    failureThreshold: 2
    periodSeconds: 5
    timeoutSeconds: 3

  dataStorage:
    enabled: true
    # Size of the PVC created
    size: 50Gi
    # Location where the PVC will be mounted.
    mountPath: "/vault/data"
    # Name of the storage class to use.  If null it will use the
    # configured default Storage Class.
    storageClass: null
    # Access Mode of the storage device being used for the PVC
    accessMode: ReadWriteOnce
    # Annotations to apply to the PVC
    annotations: {}
    # Labels to apply to the PVC
    labels: {}

  auditStorage:
    enabled: true

  extraEnvironmentVars:
    VAULT_CACERT: /vault/userconfig/vault-ha-tls/vault.ca
    VAULT_TLSCERT: /vault/userconfig/vault-ha-tls/vault.crt
    VAULT_TLSKEY: /vault/userconfig/vault-ha-tls/vault.key
  
  # extraSecretEnvironmentVars is a list of extra environment variables to set with the stateful set.
  # These variables take value from existing Secret objects.
  extraSecretEnvironmentVars:
  - envName: AZURE_TENANT_ID
    secretName: azure-vault-secret
    secretKey: AZURE_TENANT_ID

  - envName: AZURE_CLIENT_ID
    secretName: azure-vault-secret
    secretKey: AZURE_CLIENT_ID

  - envName: AZURE_CLIENT_SECRET
    secretName: azure-vault-secret
    secretKey: AZURE_CLIENT_SECRET

  - envName: VAULT_AZUREKEYVAULT_VAULT_NAME
    secretName: azure-vault-secret
    secretKey: VAULT_AZUREKEYVAULT_VAULT_NAME

  - envName: VAULT_AZUREKEYVAULT_KEY_NAME
    secretName: azure-vault-secret
    secretKey: VAULT_AZUREKEYVAULT_KEY_NAME

  - envName: AZURE_TENANT_ID_secondary
    secretName: azure-vault-secret
    secretKey: AZURE_TENANT_ID2

  - envName: AZURE_CLIENT_ID_secondary
    secretName: azure-vault-secret
    secretKey: AZURE_CLIENT_ID2

  - envName: AZURE_CLIENT_SECRET_secondary
    secretName: azure-vault-secret
    secretKey: AZURE_CLIENT_SECRET2

  - envName: VAULT_AZUREKEYVAULT_VAULT_NAME_secondary
    secretName: azure-vault-secret
    secretKey: VAULT_AZUREKEYVAULT_VAULT_NAME2

  - envName: VAULT_AZUREKEYVAULT_KEY_NAME_secondary
    secretName: azure-vault-secret
    secretKey: VAULT_AZUREKEYVAULT_KEY_NAME2


  volumes:
    - name: userconfig-vault-ha-tls
      secret:
        defaultMode: 420
        secretName: vault-ha-tls
  
  volumeMounts:
    - mountPath: /vault/userconfig/vault-ha-tls
      name: userconfig-vault-ha-tls
      readOnly: true


  # Run Vault in "HA" mode. There are no storage requirements unless the audit log
  # persistence is required.  In HA mode Vault will configure itself to use Consul
  # for its storage backend.  The default configuration provided will work the Consul
  # Helm project by default.  It is possible to manually configure Vault to use a
  # different HA backend.
  ha:
    enabled: true
    replicas: 3
    raft: 
      enabled: true
      setNodeId: true
      config: |
        cluster_name = "vault-integrated-storage"
        disable_mlock = true
        # enable_multiseal = true

        storage "raft" {
          path    = "/vault/data/"
          retry_join {
            leader_api_addr = "https://vault-0.vault-internal.vault.svc.cluster.local:8200"
            leader_ca_cert_file = "/vault/userconfig/vault-ha-tls/vault.ca"
            leader_client_cert_file = "/vault/userconfig/vault-ha-tls/vault.crt"
            leader_client_key_file = "/vault/userconfig/vault-ha-tls/vault.key"
          }
          retry_join {
            leader_api_addr = "https://vault-1.vault-internal.vault.svc.cluster.local:8200"
            leader_ca_cert_file = "/vault/userconfig/vault-ha-tls/vault.ca"
            leader_client_cert_file = "/vault/userconfig/vault-ha-tls/vault.crt"
            leader_client_key_file = "/vault/userconfig/vault-ha-tls/vault.key"
          }
          retry_join {
            leader_api_addr = "https://vault-2.vault-internal.vault.svc.cluster.local:8200"
            leader_ca_cert_file = "/vault/userconfig/vault-ha-tls/vault.ca"
            leader_client_cert_file = "/vault/userconfig/vault-ha-tls/vault.crt"
            leader_client_key_file = "/vault/userconfig/vault-ha-tls/vault.key"
          }
        }

        listener "tcp" {
          tls_disable = 0
          address = "0.0.0.0:8200"
          cluster_address = "0.0.0.0:8201"
          
          tls_cert_file = "/vault/userconfig/vault-ha-tls/vault.crt"
          tls_key_file  = "/vault/userconfig/vault-ha-tls/vault.key"
          tls_client_ca_file = "/vault/userconfig/vault-ha-tls/vault.ca"

          # Enable unauthenticated metrics access (necessary for Prometheus Operator)
          telemetry {
            unauthenticated_metrics_access = "true"
          }
        }
        
        service_registration "kubernetes" {}

        seal "azurekeyvault" {
          name = "primary"
          priority = "1"
          key_name = "test-vault-key"
        }

        # seal "azurekeyvault" {
        #   name = "secondary"
        #   priority = "2"
        #   key_name = "test-vault-key-2"
        # }

        ui = true

        telemetry {
          dogstatsd_addr = "localhost:8125"
          enable_hostname_label = true
          prometheus_retention_time = "0h"
        }


# Vault UI
ui:
  enabled: true
  serviceType: "ClusterIP" # Or LoadBalancer
  externalPort: 8200
  annotations: {}
